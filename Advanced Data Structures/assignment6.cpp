/*Name: Disha Shetty
Roll No: SECOB246
Batch: B3
SE Computer


ASSIGNMENT : 6
The symbol table is generated by compiler. From this perspective, the symbol table is a set
of name-attribute pairs. In a symbol table for a compiler, the name is an identifier, and the
attributes might include an initial value and a list of lines that use the identifier.
Perform the following operations on symbol table:
(1) Determine if a particular name is in the table
(2) Retrieve the attributes of that name
(3) Modify the attributes of that name
(4) Insert a new name and its attributes
(5) Delete a name and its attributes
*/

#include<iostream>
#include<cstring>
using namespace std;
#define SIZE 20

typedef struct node
{
	string name,type,initial;
	int lines;
	int lineNo[SIZE];
	struct node *next;
}node;

class symbolTable
{
public:
	node *hn;
public:
	symbolTable()
	{
		hn=NULL;
	}
	node* create();
	void display();
	void search(node*,string);
	void insert(node*);
	void modify(node*,string);
	void Delete(node*,string);
};

node* symbolTable::create()
{
	node *cn,*nn;
	char ch;

	do
	{
	nn=new node;
	nn->next=NULL;
	cout<<"\nEnter the name of variable : ";
	cin>>nn->name;
	cout<<"\nEnter the Datatype : ";
	cin>>nn->type;
	cout<<"\nEnter its initial value : ";
	cin>>nn->initial;
	cout<<"\nEnter the number of lines : ";
	cin>>nn->lines;
	cout<<"\nEnter the line numbers : ";
		for(int i=0;i<nn->lines;i++)
		{
			cin>>nn->lineNo[i];
		}
	cout<<"\n-----------------------------------------------------------------------";
	
	if(hn==NULL)
	{
		hn=nn;
	}
	else
	{
		cn=hn;
		while(cn->next!=NULL)
		{
			cn=cn->next;
		}
		cn->next=nn;
	}
	cout<<"\nDo u want to add more(y/n) : ";
	cin>>ch;
	cout<<"\n------------------------------------------------------------------\n";
	}while(ch=='y'||ch=='Y');
	return hn;
}

void symbolTable::display()
{
	cout<<"\n\n\t\t\t******* SYMBOL TABLE ********\n\n";
	cout<<"\tName\t\tDatatype\tInitial Value\t#Line\tLine No\n\n";
		node *cn;
		cn=hn;
		while(cn!=NULL)
		{
			cout<<"\t"<<cn->name<<"\t\t"<<cn->type<<"\t\t"<<cn->initial<<"\t\t"<<cn->lines<<"\t";
			for(int i=0;i<cn->lines;i++)
			{
			cout<<cn->lineNo[i]<<" ";
			}
			cout<<endl;
			cn=cn->next;
		}
		
}

void symbolTable::search(node *hn,string key)
{
	node *cn;
	
	for(cn=hn;cn!=NULL;cn=cn->next)
	{
		if(cn->name==key)
		{
			break;
		}
	}
	if(cn==NULL)
	{
		cout<<"\n"<<key<<" not found in Symbol Table\n";
	}
	else
	{
		cout<<"\n"<<key<<" found in Symbol Table\n\n";
	
		cout<<"Name of variable : "<<cn->name;
		cout<<"\nDatatype : "<<cn->type;
		cout<<"\nInitial value : "<<cn->initial;
		cout<<"\nNumber of lines : "<<cn->lines;
		cout<<"\nLine numbers : ";
			for(int i=0;i<cn->lines;i++)
			{
				cout<<cn->lineNo[i]<<" ";
			}
	}
}

void symbolTable::insert(node *hn)
{
	node *nn,*cn;
	
	nn=new node;
	nn->next=NULL;
	cout<<"\nEnter the name of variable : ";
	cin>>nn->name;
	cout<<"\nEnter the Datatype : ";
	cin>>nn->type;
	cout<<"\nEnter its initial value : ";
	cin>>nn->initial;
	cout<<"\nEnter the number of lines : ";
	cin>>nn->lines;
	cout<<"\nEnter the line numbers : ";
		for(int i=0;i<nn->lines;i++)
		{
			cin>>nn->lineNo[i];
		}
	cout<<"\n-----------------------------------------------------------------------";
	
	if(hn==NULL)
	{
		hn=nn;
	}
	else
	{
		cn=hn;
		while(cn->next!=NULL)
		{
			cn=cn->next;
		}
		cn->next=nn;
	}	
}

void symbolTable::modify(node *hn,string key)
{
	node *cn;
	
	for(cn=hn;cn!=NULL;cn=cn->next)
	{
		if(cn->name==key)
		{
			break;
		}
	}
	if(cn==NULL)
	{
		cout<<"\n"<<key<<" not found in Symbol Table\n";
	}
	else
	{
		cout<<"\nEnter new Attributes\n";
	
		cout<<"\nNew Number of lines : ";
		cin>>cn->lines;
		cout<<"\nNew Line numbers : ";
			for(int i=0;i<cn->lines;i++)
			{
				cin>>cn->lineNo[i];
			}
	}
}

void symbolTable::Delete(node *hn,string key)
{
	node *cn,*temp;
	cn=hn;

	if(hn->name==key)
	{
		temp=hn;
		hn=hn->next;
		delete(temp);
	}
	else
	{
		while(cn->name!=key && cn!=NULL)
		{
			temp=cn;
			cn=cn->next;
		}
		if(cn->name==key)
		{
			node *p;
			p=cn;
			temp->next=cn->next;
			delete(p);
		}
	}	
}

int main()
{
	symbolTable s;
	string k;
	char ch;
	int choice;
	do
	{
		cout<<"\n\t*********** MENU *************\n\n";
		cout<<"\t1.Create Symbol Table\n";
		cout<<"\t2.Display Symbol Table\n";
		cout<<"\t3.Search\n";
		cout<<"\t4.Insert\n";
		cout<<"\t5.Modify\n";
		cout<<"\t6.Delete\n";
		cout<<"\tExit\n\n";
		cout<<"\tEnter choice: ";
		cin>>choice;
		
		switch(choice)
		{
			case 1:
				s.create();
				break;
			case 2:
				s.display();
				break;
			case 3:
				do
				{
				cout<<"\nEnter the search identifier name : ";
				cin>>k;
				s.search(s.hn,k);
				cout<<"\nContinue search(y/n) : ";
				cin>>ch;
				}while(ch=='y'||ch=='Y');
				break;
			case 4:
				do
				{
					s.insert(s.hn);
					cout<<"\nContinue insertion(y/n) : ";
					cin>>ch;
				}while(ch=='y'||ch=='Y');
				break;
			case 5:
				do
				{
				cout<<"\nEnter the identifier name to be modified : ";
				cin>>k;
				s.modify(s.hn,k);
				cout<<"\nContinue modify(y/n) : ";
				cin>>ch;
				}while(ch=='y'||ch=='Y');
				break;
			case 6:
				do
				{
					cout<<"\nEnter the identifier to be deleted : ";
					cin>>k;
					s.Delete(s.hn,k);
					cout<<"\nContinue deletion(y/n) : ";
					cin>>ch;
				}while(ch=='y'||ch=='Y');
				break;
			case 7:
				return 0;
				break;
			default:
				cout<<"\nInvalid choice...\n";
				break;	
		}
		cout<<"\nDo u want to continue(y/n) : ";
	cin>>ch;
	}while(ch=='y'||ch=='Y');

	return 0;
}
